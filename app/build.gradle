/**
 * The first line applies the Android plugin for Gradle to this build and
 * makes the android block available to specify Android-specific build options.
 * This plugin is fetched from jcenter
 */
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

/**
 * The android block is where you configure all your Android-specific
 * build options. The config related to app module goes inside android block.
 */
android {

    /**
     * compileSdkVersion specifies the Android API level Gradle should use to
     * compile your app. This means your app can use the API features included in
     * this API level and lower.
     */
    compileSdkVersion 29


    /**
     * The defaultConfig block encapsulates default settings and entries for all
     * build variants, and can override some attributes in main/AndroidManifest.xml
     * dynamically from the build system. You can configure product flavors to override
     * these values for different versions of your app.
     */
    defaultConfig {

        /**
         * applicationId uniquely identifies the package for publishing.
         * However, your source code should still reference the package name
         * defined by the package attribute in the main/AndroidManifest.xml file.
         */
        applicationId "com.rahulahuja.gradleexplained"

        // Defines the minimum API level required to run the app.
        minSdkVersion 21

        // Specifies the API level used to test the app.
        targetSdkVersion 29

        // Defines the version number of your app.
        versionCode 1

        // Defines a user-friendly version name for your app.
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }


    /**
     * The buildTypes block is where you can configure multiple build types.
     * By default, the build system defines two build types: debug and release.
     *
     * The debug build type is not explicitly shown in the default build configuration,
     * but it includes debugging tools and is signed with the debug key.
     *
     * The release build type applies Proguard settings and is not signed by default.
     */
    buildTypes {
        debugQc.initWith(buildTypes.debug)

        release {

            // Enables code shrinking for the release build type.
            minifyEnabled true

            // This is where the Android plugin should look for the proguard file
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debugQc {
            // config that will change basis on build type
            buildConfigField "int", "INT_VALUE", "0"
            buildConfigField "String", "BASE_URL", "\"http://blahblha.com/blah/\""
            buildConfigField "boolean", "BOOL_VALUE", "true"
        }
    }

    /**
     * The productFlavors block is where you can configure multiple product flavors.
     * This allows you to create different versions of your app that can
     * override the defaultConfig block with their own settings. Product flavors
     * are optional, and the build system does not create them by default.
     *
     * Here, we create a free and paid product flavor. Each product flavor
     * then specifies its own application ID, so that they can exist on the Google
     * Play Store, or an Android device, simultaneously.
     *
     * If you declare product flavors, you must also declare flavor dimensions
     * and assign each flavor to a flavor dimension. It is used in a case where
     * we have a lot of drawables for every different pixel config (mdpi, hdpi..)
     * more - https://classroom.udacity.com/courses/ud867/lessons/4020658782/concepts/43254185720923
     *
     * The main source set is common for all the product flavors.
     */
    flavorDimensions "tier"
    productFlavors {
        free {
            dimension "tier"
            // overriding default config
            applicationId "com.rahulahuja.gradleexplained.free"
            minSdkVersion 22

            // config that will change basis on flavor
            buildConfigField "int", "INT_VALUE", "-1"
            buildConfigField "String", "BASE_URL", "\"http://blahblha.in/blah/\""
            buildConfigField "boolean", "BOOL_VALUE", "false"
        }

        paid {
            dimension "tier"
            applicationId "com.rahulahuja.gradleexplained.paid"

            // config that will change basis on flavor
            buildConfigField "int", "INT_VALUE", "0"
            buildConfigField "String", "BASE_URL", "\"http://blahblha.com/blah/\""
            buildConfigField "boolean", "BOOL_VALUE", "true"
        }
    }

}


/**
 * The dependencies block in the module-level build configuration file
 * specifies dependencies required to build only the module itself.
 *
 * Compile time dependencies for jar and libs directory and Android Support Library go here.
 */
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    // dependencies can be managed basis flavor as below
    // Assume we want to show ads in free version only
    freeImplementation "com.google.android.gms:play-services-ads:19.0.1"

    /**
     * Add KotlinJokes project as dependency.
     * When the app module compiles, some of the important tasks that are run on KotlinJokes:
     * > Task :KotlinJokes:compileKotlin
     * > Task :KotlinJokes:compileJava NO-SOURCE
     * > Task :KotlinJokes:processResources NO-SOURCE
     * > Task :KotlinJokes:classes UP-TO-DATE
     * > Task :KotlinJokes:jar
     *
     * So basically, KotlinJokes is provided as jar to app module.
     */
    implementation project(':KotlinJokes')
}
